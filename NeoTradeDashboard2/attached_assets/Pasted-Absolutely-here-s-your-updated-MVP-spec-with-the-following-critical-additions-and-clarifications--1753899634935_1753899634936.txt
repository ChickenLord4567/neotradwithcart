Absolutely ‚Äî here‚Äôs your updated MVP spec with the following critical additions and clarifications:
	‚Ä¢	‚úÖ Clear enforcement that all trade actions (TP1, TP2, SL, breakeven, manual close) must execute via OANDA‚Äôs live API, not just logged in MongoDB
	‚Ä¢	‚úÖ Trade instruments passed to OANDA must use underscore formatting (e.g., XAUUSD ‚Üí XAU_USD)
	‚Ä¢	‚úÖ MongoDB is for tracking only, not simulation or shadow execution
	‚Ä¢	‚úÖ Trade logic and API interaction order is preserved and enforced

‚∏ª

‚úÖ Updated MVP ‚Äî Phase 1: Web Trading App Specification (OANDA Execution + MongoDB + UI)

‚∏ª

1. Authentication

‚Ä¢ Single-user login (hardcoded credentials)
‚Ä¢ All pages and API routes are protected
‚Ä¢ If unauthenticated ‚Üí redirect to login page

‚∏ª

2. Supported Instruments

‚Ä¢ Dropdown selector:
‚Ä¢ Options: XAUUSD, EURUSD, GBPUSD, USDJPY
‚Ä¢ Default: XAUUSD
‚ö† OANDA instrument format uses underscores:
	‚Ä¢	XAUUSD ‚Üí XAU_USD
	‚Ä¢	EURUSD ‚Üí EUR_USD
	‚Ä¢	GBPUSD ‚Üí GBP_USD
	‚Ä¢	USDJPY ‚Üí USD_JPY

Backend must convert to OANDA format before API calls.

‚∏ª

3. Trading Core ‚Äì True OANDA Execution

‚Ä¢ Market orders only
‚Ä¢ Inputs from UI:
	‚Ä¢	Lot size (e.g., 0.01)
	‚Ä¢	TP1, TP2, SL
‚Ä¢ Entry price is always live from OANDA‚Äôs ask/bid at execution
‚Ä¢ No manual entry price override allowed
‚Ä¢ Trade placed via OANDA API, not simulated
‚Ä¢ Uses: POST /v3/accounts/{accountId}/orders with type MARKET
‚Ä¢ Backend maps all fields correctly ‚Üí confirms trade ‚Üí returns trade ID
‚Ä¢ Endpoint: POST /api/place-trade

‚∏ª

4. Automated Trade Management ‚Äì Full OANDA Execution Only

‚ö† All trade logic must hit OANDA API ‚Äî not just update MongoDB.

‚úÖ Every 5 seconds (polling loop):
	1.	Fetch current price using /v3/accounts/{accountId}/pricing
	2.	Fetch open trades using /v3/accounts/{accountId}/openTrades
	3.	For each trade, apply this logic:

‚∏ª

TP1 Hit

‚Ä¢ If price ‚â• TP1 and trade not partially closed:
‚úÖ Call POST /v3/accounts/{accountId}/trades/{tradeId}/close with units: 75%
‚úÖ Then call PATCH /v3/accounts/{accountId}/orders to move SL to breakeven (entry price)
‚úÖ Then update MongoDB: mark partialClosed: true, tp1Hit: true, new SL, etc.

‚∏ª

TP2 Hit

‚Ä¢ If price ‚â• TP2:
‚úÖ Call POST /v3/accounts/{accountId}/trades/{tradeId}/close with units: remaining
‚úÖ Then update MongoDB: trade fully closed, profit, date, etc.

‚∏ª

SL Hit

‚Ä¢ If price ‚â§ SL:
‚úÖ Call POST /v3/accounts/{accountId}/trades/{tradeId}/close with units: all
‚úÖ Then update MongoDB: trade closed with loss

‚∏ª

Manual Close

‚Ä¢ Triggered via UI ‚Üí POST /api/close-trade
‚úÖ Uses OANDA API: POST /v3/accounts/{accountId}/trades/{tradeId}/close
‚úÖ Syncs closure to MongoDB

‚ùó Trade management logic must not simulate these events in Mongo only.
‚ùó OANDA API is always the source of truth for execution.

‚∏ª

5. Market Price Updates

‚Ä¢ Every 2 seconds, fetch live market price via OANDA
‚Ä¢ Display as:
	‚Ä¢	‚ÄúLive Entry Price: $XXXX.XX‚Äù (ask for Buy, bid for Sell)
‚Ä¢ UI does not allow user to enter entry price manually
‚Ä¢ Trade executes at live market price at moment of button click

‚∏ª

6. Analytics & Dashboard (Dark UI)

Layout

‚Ä¢ Mobile-responsive 2-column layout
‚Ä¢ Dark background, light text, PL color-coded

Left Column: Active Trades

‚Ä¢ Instrument
‚Ä¢ Direction
‚Ä¢ Entry Price
‚Ä¢ Lot Size
‚Ä¢ TP1, TP2, SL
‚Ä¢ Live P/L (calculated using OANDA price)
‚Ä¢ Account Balance (live)

Right Column: Trade History + Summary

‚Ä¢ Last 5 days:
	‚Ä¢	Entry/close prices
	‚Ä¢	P/L
‚Ä¢ Summary view:
	‚Ä¢	Total trades
	‚Ä¢	Profit summary (7d, 30d, 90d, YTD)

‚∏ª

7. Data Persistence with MongoDB Atlas

Persistence

‚Ä¢ All trades stored:
	‚Ä¢	Open, partial, closed, failed
	‚Ä¢	SL/TP history, breakeven, close reason
‚Ä¢ Used for tracking and analytics only, not trade execution
‚Ä¢ MongoDB is not the trading engine

Secure Connection Logic

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  ssl: true,
  sslValidate: false // Replit-safe
});

Retry Logic (non-blocking)

const connectWithRetry = () => {
  mongoose.connect(process.env.MONGO_URI, { ... })
    .then(() => console.log('‚úÖ MongoDB connected'))
    .catch(err => {
      console.error('‚ùå MongoDB error:', err.message);
      console.log('üîÅ Retrying in 5s...');
      setTimeout(connectWithRetry, 5000);
    });
};
connectWithRetry();

Trade Schema Example

{
  "_id": "uuid",
  "instrument": "XAUUSD",
  "direction": "buy",
  "entryPrice": 1948.25,
  "closePrice": 1952.10,
  "lotSize": 0.5,
  "tp1": 1950.00,
  "tp2": 1952.00,
  "sl": 1945.00,
  "dateOpened": "2025-07-28T12:30:00Z",
  "dateClosed": "2025-07-28T12:45:00Z",
  "profitLoss": 150.5,
  "isProfit": true,
  "isLoss": false,
  "partialClosed": true
}


‚∏ª

8. Frontend (React + TailwindCSS)

‚Ä¢ Auto-refresh every 5 seconds:
	‚Ä¢	Active trades
	‚Ä¢	OANDA prices
	‚Ä¢	Account balance

‚Ä¢ Notifications:
	‚Ä¢	‚úÖ Trade placed
	‚Ä¢	‚ö† TP1 hit ‚Üí SL moved to breakeven and 75% closed
	‚Ä¢	‚úÖ TP2 hit ‚Üí trade fully closed
	‚Ä¢	‚ùå SL hit ‚Üí trade exited

‚Ä¢ Manual close button calls backend endpoint
‚Ä¢ All prices + P/L use live OANDA data

‚∏ª

9. Backend (Node.js + Express)

.env values

OANDA_ACCOUNT_ID=101-004-35896511-001
OANDA_API_KEY=your-api-key
MONGO_URI=mongodb+srv://user:pass@cluster.mongodb.net/db?retryWrites=true&tls=true

API Endpoints
	‚Ä¢	POST /api/place-trade ‚Üí Place real trade via OANDA
	‚Ä¢	POST /api/close-trade ‚Üí Close real trade via OANDA
	‚Ä¢	GET /api/trade-status ‚Üí Return live trades from OANDA
	‚Ä¢	GET /api/account-balance ‚Üí Return live balance from OANDA
	‚Ä¢	GET /api/trade-history ‚Üí Return MongoDB history

Background Polling Loop (every 2‚Äì5s)
	‚Ä¢	Checks price
	‚Ä¢	Evaluates TP1, TP2, SL
	‚Ä¢	Executes real OANDA trade close/update calls
	‚Ä¢	Then updates MongoDB

‚∏ª

10. Security

‚Ä¢ All API keys server-side only
‚Ä¢ HTTPS enforced
‚Ä¢ All backend routes require valid session token
‚Ä¢ No trade logic on frontend
‚Ä¢ No access to credentials from UI

‚∏ª

11. Deployment

‚Ä¢ Backend: Render or Railway
‚Ä¢ Frontend: Netlify or Replit
‚Ä¢ Database: MongoDB Atlas

‚∏ª

‚ö† Deployment & Delivery Rules

‚Ä¢ Must be 100% functional
‚Ä¢ All trades must:
	‚Ä¢	Execute live via OANDA
	‚Ä¢	Reflect changes via actual API (not just Mongo updates)
‚Ä¢ Missing features = failed delivery:
	‚Ä¢	Live prices
	‚Ä¢	Real trade placement
	‚Ä¢	Breakeven and partial logic
	‚Ä¢	MongoDB persistence
	‚Ä¢	Accurate manual close
	‚Ä¢	Price/PL sync

Prompt if missing credentials:

‚ö† Missing OANDA_API_KEY. Please provide it in the .env file.

.env.example Required

OANDA_ACCOUNT_ID=101-004-35896511-001
OANDA_API_KEY=5c46f977b00b37d4e141b34211ea53b5-574392e071357e127441b5bc60c4d864
MONGO_URI=mongodb+srv://surnamnikhil:f1ZP25Re7ac4cRyR@trades.sztvbvr.mongodb.net/?retryWrites=true&w=majority&tls=true&tlsAllowInvalidCertificates=true&appName=Tradesurl


‚∏ª